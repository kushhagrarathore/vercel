import { GoogleGenerativeAI } from "@google/generative-ai";
import { createClient } from "@supabase/supabase-js";

// Validate environment variables
if (!process.env.GEMINI_API_KEY) {
  throw new Error('GEMINI_API_KEY environment variable is required');
}
if (!process.env.SUPABASE_URL) {
  throw new Error('SUPABASE_URL environment variable is required');
}
if (!process.env.SUPABASE_SERVICE_KEY) {
  throw new Error('SUPABASE_SERVICE_KEY environment variable is required');
}

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_KEY);

export async function generateQuestions(topic, session_code) {
  const model = genAI.getGenerativeModel({ model: "gemini-pro" });

  const prompt = `
    Generate 3 MCQ quiz questions on the topic "${topic}".
    Format: JSON array with question, 4 options, and correct_answer_index.
  `;

  const result = await model.generateContent(prompt);
  const text = result.response.text();

  let questions;
  try {
    questions = JSON.parse(text);
  } catch (e) {
    throw new Error("Gemini response was not valid JSON:\n" + text);
  }

  // First, create a quiz record
  const { data: quizData, error: quizError } = await supabase
    .from('quizzes')
    .insert([{
      id: session_code,
      title: `AI Generated: ${topic}`,
      description: `Quiz generated by AI on the topic: ${topic}`,
      customization_settings: JSON.stringify({
        fontFamily: 'Inter, Arial, sans-serif',
        textColor: '#000000',
        background: '#ffffff',
      }),
      is_active: true,
      is_shared: false,
      is_published: false,
      form_url: '',
      created_by: 'ai_generated',
      created_at: new Date().toISOString(),
    }])
    .select()
    .single();

  if (quizError) throw new Error(`Failed to create quiz: ${quizError.message}`);

  const insertData = questions.map((q, i) => ({
    id: crypto.randomUUID(),
    quiz_id: session_code,
    slide_index: i,
    question: q.question,
    type: 'multiple',
    options: q.options,
    correct_answers: [q.correct_answer_index],
    background: '#ffffff',
    text_color: '#000000',
    font_size: 20,
    font_family: 'Inter, Arial, sans-serif',
    created_at: new Date().toISOString(),
  }));

  const { error } = await supabase.from("slides").insert(insertData);
  if (error) throw new Error(error.message);

  return insertData;
} 