import { GoogleGenerativeAI } from "@google/generative-ai";
import { createClient } from "@supabase/supabase-js";

export async function generateQuestions(topic, session_code, userId = null) {
  // Validate environment variables
  if (!process.env.REACT_APP_GEMINI_API_KEY) {
    throw new Error('REACT_APP_GEMINI_API_KEY environment variable is required');
  }
  if (!process.env.REACT_APP_SUPABASE_URL) {
    throw new Error('REACT_APP_SUPABASE_URL environment variable is required');
  }
  if (!process.env.REACT_APP_SUPABASE_SERVICE_KEY) {
    throw new Error('REACT_APP_SUPABASE_SERVICE_KEY environment variable is required');
  }

  const genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);
  const supabase = createClient(process.env.REACT_APP_SUPABASE_URL, process.env.REACT_APP_SUPABASE_SERVICE_KEY);

  const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

  const prompt = `
    Generate 4 multiple choice (MCQ) quiz questions on the topic "${topic}".
    Each question should have:
      - a question string
      - 4 options (A, B, C, D)
      - correct_answer_index (0-based)
    Example: { "question": "What is the capital of France?", "options": ["Berlin", "London", "Paris", "Madrid"], "correct_answer_index": 2 }
    
    Format your response as a JSON array of 4 objects, each matching the example above. Return only the JSON array, with no explanations, notes, or extra text.
  `;

  const result = await model.generateContent(prompt);
  const text = result.response.text();

  let cleaned = text.trim();
  // Remove Markdown code block if present
  if (cleaned.startsWith("```json")) {
    cleaned = cleaned.replace(/^```json/, "").replace(/```$/, "").trim();
  } else if (cleaned.startsWith("```")) {
    cleaned = cleaned.replace(/^```/, "").replace(/```$/, "").trim();
  }
  // Extract only the first JSON array (ignore any trailing notes)
  const firstBracket = cleaned.indexOf('[');
  const lastBracket = cleaned.lastIndexOf(']');
  if (firstBracket !== -1 && lastBracket !== -1) {
    cleaned = cleaned.substring(firstBracket, lastBracket + 1);
  }
  let questions;
  try {
    questions = JSON.parse(cleaned);
  } catch (e) {
    throw new Error("Gemini response was not valid JSON:\n" + text);
  }

  // Validate and flatten MCQ questions
  const quiz_id = crypto.randomUUID();
  const insertData = [];
  let slide_index = 0;
  if (Array.isArray(questions)) {
    for (const q of questions) {
      if (!q.question || !Array.isArray(q.options) || q.options.length !== 4 || typeof q.correct_answer_index !== 'number' || q.correct_answer_index < 0 || q.correct_answer_index > 3) continue;
      insertData.push({
        id: crypto.randomUUID(),
        quiz_id,
        slide_index: slide_index++,
        question: q.question,
        type: 'multiple',
        options: q.options,
        correct_answers: [q.correct_answer_index],
        background: '#ffffff',
        text_color: '#000000',
        font_size: 20,
        font_family: 'Inter, Arial, sans-serif',
        created_at: new Date().toISOString(),
      });
    }
  }

  // Create the quiz record
  const { data: quizData, error: quizError } = await supabase
    .from('quizzes')
    .insert([{
      id: quiz_id,
      user_id: userId, // pass the user id if available, else null
      title: `AI Generated: ${topic}`,
      created_at: new Date().toISOString(),
      description: `Quiz generated by AI on the topic: ${topic}`,
      customization_settings: {
        fontFamily: 'Inter, Arial, sans-serif',
        textColor: '#000000',
        background: '#ffffff',
      },
      is_active: true,
      is_shared: false,
      is_published: false,
      created_by: 'ai_generated',
      current_slide_index: 0,
      mode: 'static',
      form_id: null,
      start_time: null,
      end_time: null
    }])
    .select()
    .single();

  if (quizError) throw new Error(`Failed to create quiz: ${quizError.message}`);

  const { error } = await supabase.from("slides").insert(insertData);
  if (error) throw new Error(error.message);

  return insertData;
} 